---
layout: post
title:  "Sinatra Assessment Project: Where its all starting to come together. "
date:   2016-09-14 16:47:49 +0000
---



So although I have been so behind on getting through this course for one reason or another (including some unrelated health issues that suck), its been even more difficult to get caught up to speed with my blog posts, and so here I am! Actually, this project requires this blog so I couldnt get away with not writing SOMETHING. Lol, to be honest I plan on whipping up a quick series of blogs in the coming weeks which will focus on mistakes I have made along the way with some of the lessons up to this point, and what others can learn from to prevent them from spending too much time on labs. For now today's focus is on the mighty Sinatra Assessment project. Well it isn't *THAT* mighty...

This application is basically an elementary version of a soundcloud or a mixcloud music service, where users (after signing up) can add their own music and mixes and view all of the submitted content by all of the users. Since this is my first sinatra application I what I wound up with was a bit different than I intended but I'm learning how flexible programming can be.

One thing I've started doing (which for some may be redundant) is creating an outline which serves as a checklist to make sure I have my file structure and all of the cooresponding routes in place. It allows me to think ahead and visualize not only how to contruct my file structure but also to (kind of) think of what different directions might be options prior to creating everything. Perhaps its too much to do as it takes time to write it out but for me it is necessary to be organized or else things get messy quickly. As programmers its easy to get caught up in the minusha so starting this habit early in my development career is a good thing. As I'm building out I put checkmarks next to each outline item. If anything it feels good to chip away at stuff and seeing it on this outline makes me feel more productive. 

Next up, migrations. Well, technically let's call them "initial" migrations as there would be many more down the road. I needed to create 3 tables, 1 for the user, 1 for "tracks" that would be uploaded and 1 for "mixes" . Following the CRUD methodology, the user model was unique in that it provides various methods to create (signup) and log in, along with methods to edit and delete. Next were the "tracks" and "mixes" models which were also CRUD based and were pretty straighforward to stubb out.

One of the first issues I ran into was displaying the submitted items. I didn't have much trouble dropping into erb to generate a list of the track or mix titles but then I realized that I needed to show the artist name next to each item so as not to confuse what was posted by other users. For some reason this was the first can of worms. Do I create artist names? Should I give the user the option to set the name of the artist at the time of submitting a track? My has-many, belongs-to relationships seemed to make sense, but I kept thinking that perhaps the user should have the ability to have a unique username (for security purposes) from their artist name. So I add an extra column to the user, then for some reason thought I had to have that column for all the tables. Then the mind starts running and now I'm becoming a pro at migrations...back and forth...creating additional tables... dropping them, adding/deleting columns, renaming them... you name it, I did it.

I eventually worked out the right column structure built out the MVC structure following conventions but wasnt quite sure if I had to be a little more unique with naming views accordingly. Not only am I now questioning, the naming conventions as I start building the first routes and cooresponding forms, I'm feeling better about where things are heading. I am able to post the track info, show that newly created track and then can go to a list of all of the tracks by all of the artists. I also needed to be able to iterate through and list out all of the user's tracks and mixes on the "artist/show" view. As I mentioned earlier getting the names of the artists to display next to each track was indeed tricky. Even though I know a ton more than I did when I started this course, I still get the cross-eyed look on my face when it comes to calling methods in the right order. I wind up trying to write this method a multitude of different ways, with not much success...  Errors messages are telling me that certain methods were not definied when they were. In some cases I was redirecting to the wrong erb files... uh boy ths is getting a bit overwhelming. Breathe.....

So to make a longer story not as long (o-O), with some help from one of the instructors, I was reminded that: a.) I can be more flexible in writing methods to allow me to write out erb method calls to include only tracks that were created by the user on the users "artist/show" view. Additionally, as a result of the quick 10 minute chat session, something immediately clicked in my brain and I was able to write out that pesky method in the correct to display the artist's name next to its track. Whew.... 

This was a tricky lab but wasnt as tricky and as laborius as the scraping assessment lab... that one was a doozy. Having said I'm sure there is a good amount of refactoring I could do but it is now functional and it felt good to get this in working order. 



