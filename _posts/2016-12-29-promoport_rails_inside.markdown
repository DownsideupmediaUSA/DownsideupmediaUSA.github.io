---
layout: post
title:  "PromoPort : Rails inside!"
date:   2016-12-29 17:08:56 +0000
---


Just finished buttoning up my first rails application. Keeping in line with my other projects, this is a music promo distribution application that I will ultimately use as the foundation to my own website to share promos both of new and back catalog material (of my own work and other artists on my label) to select dj's who support my/my associated artists' work, so taking the extra (extra, extra) time to really understand what I'm doing is helpful in a multitude of ways both in my aspiring career in Web App Development, as well as my music ventures. This simplified version of this promo app essentially allows a user(who would be a touring/active DJ) to sign up, sign in and leave comments on various tracks. 

My last 2 assessment projects took a long time to complete, and involved a lot of breaking, fixing, breaking, starting from scratch, rebuilding etc. Needless to say this one was no different... 

My first mistake was in my first iteration of this project, I read a little too much into the advise provided in the readme for this lab which suggested to build out the authentication system from scratch instead of using Devise. This created a host of issues for me. I was able to build out the various MCV/crud actions and applicable views, but as I started to move forward: integrating omniauth, building out my models I realized that I was better off using Devise and just configuring it to fit this apps needs. SO, I scrapped everything and built it out from scratch using Devise. 

Devise makes things pretty simple in that it does a lot of things behind the curtain that help keep your code clean and organized. You don't have to build out the sign in /sign up forms or cooresponding views. But what it does is (for the newb like myself) it confuses the shit out you when it comes to controllers. Where is the Devise Controller... I can tell something is controlling Devise because my Users controller was pretty much blank...hmmm I know they said Rails is magical, but why can't I see what's controlling Devise? In order to add a username which would be used for a dropdown menu in the comments section, or (eventually as I continue to build this out)  allow a new user to register as a "label owner", I knew I would have to add specific params to the devise controller's strong params. After digging around and some help from an instructor, I was able to use the application controller to override and add those keys to the strong params. 

One of the other things that confused the heck out of me why I was having trouble persisting data to the database via the forms I created. Especially how to display artist info for the index of songs, and how to display the actual comments and the usernames of those  who commented on the song-show page. This was a gruelling process of me breaking and rebuilding routes using nested resources to give views access to other models/objects, then checking the applicable links to make sure they are routing to the correct actions, and making sure the various controller actions were as dry as possible. 

After refactoring with some simple callbacks and further separating concerns with specific controllers, I then added some bootstrapping to make it (kind of) professional. All in all this process took way longer than I thought, partly because of this being the first attempt at a rails app, but also because it was very challenging trying to sift through all of the info online on how to set up certain features. Documentation, Stack Overflow, and really the industry in general really don't make things to easy to decypher, as everything reads so blandly it is challenging to find solutions, or work arounds to specific obstacles I was running into (much like the Devise controller overriding questions I had explained earlier). 

Again this is the foundation to some of the functionality I want to provide on my own site, so I don't have everything set up exactly as I would for my personal needs, and I have a lot more work to do to get this truly functioning with a separate admin panel, a streaming player and a feature that allows the user to download either mp3 or wav files of the tracks (only after) leaving a comment, images (using the paperclip gem perhaps)... but again at least this is a great starting point and I am very excited to build on to and implement this into a working site. 
