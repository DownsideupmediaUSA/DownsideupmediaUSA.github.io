---
layout: post
title:  "PromoPort : with Javascript"
date:   2016-12-29 12:08:17 -0500
---


OK, so this latest version of my rails project, "PromoPort", now features javascript functionality. What's strange is that this project didn't take me the typical 3 weeks to complete. I think for some reason, javascript seems to be coming to me fairly easy. 

There are 2 places where javascript was implemented: 1) a comments section in the songs show page, and 2) using javascript in incorporation with will paginate to scroll through 1 track at a time on the dj dashboard. In both cases we were to NOT use remote true which made it a bit challenging but none the less... its done. Setting up the comments section involved "hijacking" the "load comments" link so that we can use it to trigger a javascript request. Implementing server side ajax model so that the server returns javascript which contains instructions as to what to do with that returned data. The video lecture "Rails + AJax 1:Load Comments, was perfect in illustrating the procedure. Next, I had to set up the comments section so that it sends an ajax post request which is then added to the list of comments via javascript. The video didn't discuss how to incorporate that it was a registered user's comment, so this was a bit more challenging. After some slightly painful consideration, I had to also re-write my comments section, which was set up initially with a drop down menu to select the writer of the comment. I managed to get that set up properly and augmented the second video's procedure to fit my registered user. (whew...)

Narrowly evading pending disaster, I now focused adding a new tracks feature section to the dj dashboard where the user can go through one release at a time. SO with this section I had to deal with 2 issues. 1) utilize some sort of pagination to go through the tracks one at a time, and once that is set up,  get that data returned via javascript via ajax. This was a bit trickier and involved a lot of digging around. I started out by using kaminari to paginate, but for some reason I couldn't get that to work properly. After a few hours on the edge of disaster, I figured that there must be a gem to handle this and sure enough, enter : Will paginate. This handy gem pretty much did all the work for me. All I needed to do was over ride the user show action in the user's controller to paginate but with only 1 item per page, then add "will paginate" to the cooresponding view. Implementing javascript into this feature was also fairly smooth, with the help of a railscast video... albeit 4 years old. In the video it wanted to set up a paginate js file where we hooked into the pagination a tag and on the "click", call the .live method which in turn would call another function to send a get request for the response in javascript (again being server side logic, here). For some reason the great folks at jquery decided to do away with .live...smh. I dig around a little and found that .on will work in place of .live so after reading through jquery's api I found the work around (yes!!!).

Additionally I decided to add a couple of other features. One was using the paperclip gem to add some cover art for the tracks, which was super easy to set up via its documentation. And then I also came across an awesome gem called seed dump. Even as a newb, I viewed entering seed data as being laborious. This gem was a snap. Just add it to the gemfile, bundle then " rake db:seed:dump" and "poof" all of it was entered into the seed file just like that. 

Maybe since this was an add on to the rails app...maybe I'm getting better at digging for ways to make things happen. I know that I'm trying to be more organized as to the procedures that need to be done. In a future blog I'll discuss what I've been doing to make my newb-developer life a bit easier to cope with... ;-)
